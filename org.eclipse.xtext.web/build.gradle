plugins {
	id 'com.github.node-gradle.node' version '3.0.0'
}

apply from: "${rootDir}/gradle/default-project-layout.gradle"

ext.title = 'Xtext Web API'
description = 'API for integrating Xtext editors in web pages.'

dependencies {
	compile "org.eclipse.xtext:org.eclipse.xtext.ide:$versions.xtext"
	compile "org.eclipse.xtext:org.eclipse.xtext.common.types:$versions.xtext"
	testCompile 'junit:junit'
	testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:$versions.xtext"
	testCompile project(':org.eclipse.xtext.web.example.statemachine.ide')
}

jar.bnd (
	'Bundle-Name': 'Xtext Web Integration',
	'Bundle-vendor':'Eclipse Xtext',
	'Export-Package': "!org.eclipse.xtext.web.server.test.*,org.eclipse.xtext.web.*;version=\"${version}\"",
	'Import-Package': '!org.eclipse.xtext.web.*,*'
	
)

node {
	version = '10.16.0'
	download = true
}

task testJs(type: NodeTask) {
	dependsOn(npmInstall)
	inputs.dir new File('src/test/js')
	script = file('node_modules/mocha/bin/mocha')
	args = ['-u', 'tdd', '--reporter', 'dot', 'src/test/js/*.js']
}
check.dependsOn(testJs)

def optResources = file("$buildDir/opt-resources/META-INF/resources/xtext/${project.version}")
jar.from ("$buildDir/opt-resources") {
	include 'META-INF/resources/**'
}

task copyImages(type: Copy) {
	from 'src/main/css/xtext/images'
	into new File(optResources, 'images')
}
processResources.dependsOn(copyImages)

class OptimizationTask extends com.github.gradle.node.task.NodeTask {
	OptimizationTask() {
		dependsOn(project.npmInstall)
		inputs.dir 'src/main/js'
		script.set(project.file('node_modules/requirejs/bin/r.js'))
		def logLevelWarn = 2 // WARN
		args.add('-o')
		args.add('logLevel=' + logLevelWarn)
	}
	def setBuildProfile(File buildProfile) {
		def l = new ArrayList<String>(args.get())
		l.add(1, buildProfile.path)
		args.set(l)
	}
	def setCssInput(File cssInput) {
		inputs.file cssInput
		args.add('cssIn=' + cssInput)
	}
	def setOutput(File output) {
		outputs.file output
		args.add('out=' + output.path)
	}
	def setOptimize(String optimize) {
		args.add('optimize=' + optimize)
		if (optimize != 'none')
			args.add('preserveLicenseComments=false')
	}
}

['Orion', 'Ace', 'CodeMirror'].each { Framework ->
	def framework = Framework.toLowerCase()
	
	task "optimize${Framework}Js" (type: OptimizationTask) {
		buildProfile = file("src/main/js/requirejs-${framework}-config.js")
		output = file(optResources.path + "/xtext-${framework}.js")
		optimize = 'none'
	}
	
	task "optimize${Framework}JsMin" (type: OptimizationTask) {
		buildProfile = file("src/main/js/requirejs-${framework}-config.js")
		output = file(optResources.path + "/xtext-${framework}.min.js")
		optimize = 'uglify'
	}
	
	task "optimize${Framework}Css" (type: OptimizationTask) {
		cssInput = file("src/main/css/xtext/xtext-${framework}.css")
		output = file(optResources.path + "/xtext-${framework}.css")
	}
	
	processResources.dependsOn("optimize${Framework}Js", "optimize${Framework}JsMin", "optimize${Framework}Css")
}
